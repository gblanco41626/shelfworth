generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  emailVerified Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]

  // Relations
  categories  Category[]
  items  Item[]
  purchases   Purchase[]
  stores      Store[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id     String @id @default(cuid())
  name   String
  userId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt @default(now())

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items Item[]

  @@unique([name, userId])
  @@map("categories")
}

model Store {
  id     String @id @default(cuid())
  name   String
  userId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt @default(now())

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases  Purchase[]
  items      Item[]

  @@unique([name, userId])
  @@map("stores")
}

model Item {
  id         String   @id @default(cuid())
  name       String   // Generic item name like "Milk", "Bread", "Apples"
  stock      Int      @default(0)
  categoryId String?
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  buy        Boolean  @default(false)
  storeId    String?

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  store        Store?        @relation(fields: [storeId], references: [id], onDelete: SetNull)
  purchases    Purchase[]

  @@unique([name, userId])
  @@map("items")
}

model Purchase {
  id             String    @id @default(cuid())
  itemId    String    // Links to the generic item
  brand          String?   // e.g., "Organic Valley", "Wonder Bread"
  unit           String    // e.g., "L", "g", "pack", "box", "oz"
  amount         Float     // e.g., 1.0, 500, 2
  dateBought     DateTime?
  expirationDate DateTime?
  quantity       Int       @default(1) // How many of this specific item
  price          Float     // Price paid for this specific item
  userId         String
  storeId        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  store     Store?    @relation(fields: [storeId], references: [id], onDelete: SetNull)

  @@map("purchases")
}
